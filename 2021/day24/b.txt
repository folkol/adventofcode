Split puzzle input:

14 repeated, parameterized, subroutines:

inp w
mul x 0
add x z
mod x 26
div z 1
add x 14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 16
mul y x
add z y

The subroutines have most things in common:

$ csplit input.dat '/inp w/' '{12}'
$ cut -c 6- xx* | rs -t 17 14
0    0    0    0    0    0    0    0    0    0    0    0    0    0
z    z    z    z    z    z    z    z    z    z    z    z    z    z
26   26   26   26   26   26   26   26   26   26   26   26   26   26
1    1    1    1    26   1    26   1    26   26   1    26   26   26
14   11   12   11   -10  15   -14  10   -4   -3   13   -3   -9   -12
w    w    w    w    w    w    w    w    w    w    w    w    w    w
0    0    0    0    0    0    0    0    0    0    0    0    0    0
0    0    0    0    0    0    0    0    0    0    0    0    0    0
25   25   25   25   25   25   25   25   25   25   25   25   25   25
x    x    x    x    x    x    x    x    x    x    x    x    x    x
1    1    1    1    1    1    1    1    1    1    1    1    1    1
y    y    y    y    y    y    y    y    y    y    y    y    y    y
0    0    0    0    0    0    0    0    0    0    0    0    0    0
w    w    w    w    w    w    w    w    w    w    w    w    w    w
16   3    2    7    13   6    10   11   6    5    11   4    4    6
x    x    x    x    x    x    x    x    x    x    x    x    x    x
y    y    y    y    y    y    y    y    y    y    y    y    y    y


What differs is:

X (row 5):   1   1   1   1  26   1  26   1  26  26   1  26  26  26
Y (row 6):  14  11  12  11 -10  15 -14  10  -4  -3  13  -3  -9 -12
Z (row 16): 16   3   2   7  13   6  10  11   6   5  11   4   4   6

Translate the subroutine to python code:

// for n, d in enumerate(digits):
w, i, j, k = d, X[n], Y[n], Z[n]
x = w != z % 26 + j
z /= i
z *= 25 * x + 1
z += (w + k) * x

// for n, d in enumerate(digits):
w, i, j, k = d, X[n], Y[n], Z[n]
x = w - j != z % 26
z /= i
z *= 25 * x + 1
z += (w + k) * x

// for n, d in enumerate(digits):
w, i, j, k = d, X[n], Y[n], Z[n]
x = w - j != z % 26
z = (z/i) * (25 * x + 1) + (w + k) * x

// for n, d in enumerate(digits):
w, i, j, k = d, X[n], Y[n], Z[n]
if w - j != z % 26:
	z = (26 * z / i) + (w + k)
else:
	z /= i

Note: Will always be positive, since it will either be divided by i (which is always positive) or increased by w + k which is also always positive. This means the inequality will always be True for all positive j's since all positive j's are higher than the highest possible digit:

X (row 5):   1   1   1   1  26   1  26   1  26  26   1  26  26  26
Y (row 6):  14  11  12  11 -10  15 -14  10  -4  -3  13  -3  -9 -12

Note: X is 1 for all positive Y, and 26 for all negative. There are 7 positive and 7 negative, and since all positive numbers will multiply z with 26 (and add something less than 26: w + k) and we want to end up at 0 â€” we need all chances to divide the number to occur.

This means that we need the if statement to be false for all other cases than the ones implied by positive j's.

This means that we need 'w - j' to be equal to 'whatever we added last time we increased the number'.

For my input, the extensions and reductions are paired up like this:

push 0: 0
push 1: 01
push 2: 012
push 3: 0123
pop 3: 012
push 4: 0124
pop 4: 012
push 5: 0125
pop 5: 012
pop 2: 01
push 6: 016
pop 6: 01
pop 1: 0
pop 0:


Extensions / reductions, with corresponding constraints:

push d[0] + Z[0]
push d[1] + Z[1]
push d[2] + Z[2]
push d[3] + Z[3]
pop: d[4] == d[3] + Z[3] + Y[4]
push d[5] + Z[5]
pop: d[6] == d[5] + Z[5] + Y[6]
push d[7] + Z[7]
pop: d[8] == d[7] + Z[7] + Y[8]
pop: d[9] == d[2] + Z[2] + Y[9]
push: d[10] + Z[10]
pop: d[11] == d[10] + Z[10] + Y[11]
pop: d[12] == d[1] + Z[1] + Y[12]
pop: d[13] == d[0] + Z[0] + Y[13]


Inserting constants from indata:

             0   1   2   3   4   5   6   7   8   9  10  11  12  13
Y (row 6):  14  11  12  11 -10  15 -14  10  -4  -3  13  -3  -9 -12
Z (row 16): 16   3   2   7  13   6  10  11   6   5  11   4   4   6

push d[0] + 16
push d[1] + 3
push d[2] + 2
push d[3] + 7
pop: d[4] == d[3] + 7 + (-10)
push d[5] + 6
pop: d[6] == d[5] + 6 + (-14)
push d[7] + 11
pop: d[8] == d[7] + 11 + (-4)
pop: d[9] == d[2] + 2 + (-3)
push: d[10] + 11
pop: d[11] == d[10] + 11 + (-3)
pop: d[12] == d[1] + 3 + (-9)
pop: d[13] == d[0] + 16 + (-12)

// Simplify

push d[0] + 16
push d[1] + 3
push d[2] + 2
push d[3] + 7
pop: d[4] = d[3] - 3
push d[5] + 6
pop: d[6] = d[5] - 8
push d[7] + 11
pop: d[8] = d[7] + 7
pop: d[9] = d[2] - 1
push: d[10] + 11
pop: d[11] = d[10] + 8
pop: d[12] = d[1] - 6
pop: d[13] = d[0] + 4

// Equations

d[4] = d[3] - 3   => d[3] = d[4] + 3
d[6] = d[5] - 8   => d[5] = d[6] + 8
d[8] = d[7] + 7   => d[7] = d[8] - 7
d[9] = d[2] - 1   => d[2] = d[9] + 1
d[11] = d[10] + 8 => d[10] = d[11] - 8
d[12] = d[1] - 6  => d[1] = d[12] + 6
d[13] = d[0] + 4  => d[0] = d[13] - 4

// Implied ranges (since all digits must be in 1..9, negative constant constrain MIN and positive constant affects MAX)

1..5 <- d[13] =  d[0] + 4
7..9 <- d[12] =  d[1] - 6
2..9 <-  d[9] =  d[2] - 1
4..9 <-  d[4] =  d[3] - 3
9..9 <-  d[6] =  d[5] - 8
1..2 <-  d[8] =  d[7] + 7
1..1 <- d[11] = d[10] + 8

// Highest digits satisfying constraints

 d[0]: 5, from range
 d[1]: 9, from range
 d[2]: 9, from range
 d[3]: 9, from range
 d[4]: 6, from expr
 d[5]: 9, from range
 d[6]: 1, from expr
 d[7]: 2, from range
 d[8]: 9, from expr
 d[9]: 8, from expr
d[10]: 1, from range
d[11]: 9, from expr
d[12]: 3, from expr
d[13]: 9, from expr

// Lowest digits satisfying constraints

 d[0]: 1, from range
 d[1]: 7, from range
 d[2]: 2, from range
 d[3]: 4, from range
 d[4]: 1, from expr
 d[5]: 9, from range
 d[6]: 1, from expr
 d[7]: 1, from range
 d[8]: 8, from expr
 d[9]: 1, from expr
d[10]: 1, from range
d[11]: 9, from expr
d[12]: 1, from expr
d[13]: 5, from expr
